test <- subset(data_no_OL, split == FALSE)
# Use the model to predict prices on the testing set
predictions <- predict(model, newdata = test)
# Calculate the root mean squared error (RMSE) to evaluate the performance of the model
rmse <- sqrt(mean((test$price - predictions)^2))
print(rmse)
# Build a linear regression model using the no outliers data
model <- lm(price ~ neighbourhood_group + latitude + longitude + minimum_nights + room_type + number_of_reviews + availability_365 + calculated_host_listings_count, data = data_no_OL)
summary(model)
ggplot(data = data, aes(x = room_type, fill = room_type)) +
geom_bar() +
geom_text(stat = 'count', aes(label=..count..)) +
labs(x = "Room Type", y = "Count", title = "Distribution of Room Types in NYC Airbnb Listings") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a", "#fb9a99"))
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99"))
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type (Price < 1000)", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99")) +
ylim(0, 1000)
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x = room_type, fill = room_type)) +
geom_bar() +
geom_text(stat = 'count', aes(label=..count..)) +
labs(x = "Room Type", y = "Count", title = "Distribution of Room Types in NYC Airbnb Listings") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings with price smaller than $1000
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type (Price < 1000)", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99")) +
ylim(0, 1000)
View(data)
knitr::opts_chunk$set(warning=FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caTools)
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC")
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC (Price < 1000)")+
xlim(0, 1000)
knitr::opts_chunk$set(warning=FALSE,message=FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caTools)
knitr::opts_chunk$set(warning=FALSE,message=FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caTools)
data <- read.csv("airbnb_data.csv")
head(data)
# checking duplicated values
sum(duplicated(data))
# checking missing values
na <- sum(is.na(data))
na
# drop uneccessary columns which does not generate useful insights
data <- data [, -c(1,2,3,4,6,13)]
head(data)
# Check how many levels of each columns
unique(data$room_type)
unique(data$neighbourhood_group)
# Making these columns factors
data$neighbourhood_group <- factor(data$neighbourhood_group)
data$room_type <- factor(data$room_type)
# Fill out missing values
data$reviews_per_month <- ifelse(is.na(data$reviews_per_month), 0, data$reviews_per_month)
sum(is.na(data))
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC")
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC (Price < 1000)")+
xlim(0, 1000)
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x = room_type, fill = room_type)) +
geom_bar() +
geom_text(stat = 'count', aes(label=..count..)) +
labs(x = "Room Type", y = "Count", title = "Distribution of Room Types in NYC Airbnb Listings") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings with price smaller than $1000
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type (Price < 1000)", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99")) +
ylim(0, 1000)
#calculate IQR and quantile to remove outliers
quantile <- quantile(data$price, probs=c(.25, .75))
iqr <- IQR(data$price)
data_no_OL <- data %>% filter(price > (quantile[1] - 1.5*iqr) & price < (quantile[2] + 1.5*iqr))
#Plot the dataset without the outliers
ggplot(data = data_no_OL, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC after removing outliers")
# Build a linear regression model using the no outliers data
model <- lm(price ~ neighbourhood_group + latitude + longitude + minimum_nights + room_type + number_of_reviews + availability_365 + calculated_host_listings_count, data = data_no_OL)
summary(model)
# Split the data into a training set and a testing set
set.seed(123)
split <- sample.split(data_no_OL, SplitRatio = 0.8)
train <- subset(data_no_OL, split == TRUE)
test <- subset(data_no_OL, split == FALSE)
# Use the model to predict prices on the testing set
predictions <- predict(model, newdata = test)
# Calculate the root mean squared error (RMSE) to evaluate the performance of the model
rmse <- sqrt(mean((test$price - predictions)^2))
print(rmse)
knitr::opts_chunk$set(warning=FALSE,message=FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caTools)
data <- read.csv("airbnb_data.csv")
head(data)
# checking duplicated values
sum(duplicated(data))
# checking missing values
na <- sum(is.na(data))
na
# drop unnecessary columns which does not generate useful insights
data <- data [, -c(1,2,3,4,6,13)]
head(data)
# Check how many levels of each columns
unique(data$room_type)
unique(data$neighbourhood_group)
# Making these columns factors
data$neighbourhood_group <- factor(data$neighbourhood_group)
data$room_type <- factor(data$room_type)
# Fill out missing values
data$reviews_per_month <- ifelse(is.na(data$reviews_per_month), 0, data$reviews_per_month)
sum(is.na(data))
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC")
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC (Price < 1000)")+
xlim(0, 1000)
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x = room_type, fill = room_type)) +
geom_bar() +
geom_text(stat = 'count', aes(label=..count..)) +
labs(x = "Room Type", y = "Count", title = "Distribution of Room Types in NYC Airbnb Listings") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a", "#fb9a99"))
#calculate IQR and quantile to remove outliers
quantile <- quantile(data$price, probs=c(.25, .75))
iqr <- IQR(data$price)
data_no_OL <- data %>% filter(price > (quantile[1] - 1.5*iqr) & price < (quantile[2] + 1.5*iqr))
#Plot the dataset without the outliers
ggplot(data = data_no_OL, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC after removing outliers")
knitr::opts_chunk$set(warning=FALSE,message=FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caTools)
data <- read.csv("airbnb_data.csv")
head(data)
# checking duplicated values
sum(duplicated(data))
# checking missing values
na <- sum(is.na(data))
na
# drop uneccessary columns which does not generate useful insights
data <- data [, -c(1,2,3,4,6,13)]
head(data)
# Check how many levels of each columns
unique(data$room_type)
unique(data$neighbourhood_group)
# Making these columns factors
data$neighbourhood_group <- factor(data$neighbourhood_group)
data$room_type <- factor(data$room_type)
# Fill out missing values
data$reviews_per_month <- ifelse(is.na(data$reviews_per_month), 0, data$reviews_per_month)
sum(is.na(data))
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC")
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC (Price < 1000)")+
xlim(0, 1000)
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x = room_type, fill = room_type)) +
geom_bar() +
geom_text(stat = 'count', aes(label=..count..)) +
labs(x = "Room Type", y = "Count", title = "Distribution of Room Types in NYC Airbnb Listings") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings with price smaller than $1000
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type (Price < 1000)", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99")) +
ylim(0, 1000)
View(data_no_OL)
#calculate IQR and quantile to remove outliers
quantile <- quantile(data$price, probs=c(.25, .75))
iqr <- IQR(data$price)
data_no_OL <- data %>% filter(price > (quantile[1] - 1.5*iqr) & price < (quantile[2] + 1.5*iqr))
#Plot the dataset without the outliers
ggplot(data = data_no_OL, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC after removing outliers")
# Build a linear regression model using the no outliers data
model <- lm(price ~ neighbourhood_group + latitude + longitude + minimum_nights + room_type + number_of_reviews + availability_365 + calculated_host_listings_count, data = data_no_OL)
summary(model)
# Split the data into a training set and a testing set
set.seed(123)
split <- sample.split(data_no_OL, SplitRatio = 0.8)
train <- subset(data_no_OL, split == TRUE)
test <- subset(data_no_OL, split == FALSE)
# Use the model to predict prices on the testing set
predictions <- predict(model, newdata = test)
# Calculate the root mean squared error (RMSE) to evaluate the performance of the model
rmse <- sqrt(mean((test$price - predictions)^2))
print(rmse)
# Estimate the mean price of Airbnb listings in New York City
mean_price <- mean(dat_no_OL$price)
View(data_no_OL)
View(data_no_OL)
knitr::opts_chunk$set(warning=FALSE,message=FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caTools)
data <- read.csv("airbnb_data.csv")
head(data)
# checking duplicated values
sum(duplicated(data))
# checking missing values
na <- sum(is.na(data))
na
# drop uneccessary columns which does not generate useful insights
data <- data [, -c(1,2,3,4,6,13)]
head(data)
# Check how many levels of each columns
unique(data$room_type)
unique(data$neighbourhood_group)
# Making these columns factors
data$neighbourhood_group <- factor(data$neighbourhood_group)
data$room_type <- factor(data$room_type)
# Fill out missing values
data$reviews_per_month <- ifelse(is.na(data$reviews_per_month), 0, data$reviews_per_month)
sum(is.na(data))
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC")
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC (Price < 1000)")+
xlim(0, 1000)
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x = room_type, fill = room_type)) +
geom_bar() +
geom_text(stat = 'count', aes(label=..count..)) +
labs(x = "Room Type", y = "Count", title = "Distribution of Room Types in NYC Airbnb Listings") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings with price smaller than $1000
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type (Price < 1000)", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99")) +
ylim(0, 1000)
#calculate IQR and quantile to remove outliers
quantile <- quantile(data$price, probs=c(.25, .75))
iqr <- IQR(data$price)
data_no_OL <- data %>% filter(price > (quantile[1] - 1.5*iqr) & price < (quantile[2] + 1.5*iqr))
#Plot the dataset without the outliers
ggplot(data = data_no_OL, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC after removing outliers")
# Build a linear regression model using the no outliers data
model <- lm(price ~ neighbourhood_group + latitude + longitude + minimum_nights + room_type + number_of_reviews + availability_365 + calculated_host_listings_count, data = data_no_OL)
summary(model)
# Split the data into a training set and a testing set
set.seed(123)
split <- sample.split(data_no_OL, SplitRatio = 0.8)
train <- subset(data_no_OL, split == TRUE)
test <- subset(data_no_OL, split == FALSE)
# Use the model to predict prices on the testing set
predictions <- predict(model, newdata = test)
# Calculate the root mean squared error (RMSE) to evaluate the performance of the model
rmse <- sqrt(mean((test$price - predictions)^2))
print(rmse)
# Estimate the mean price of Airbnb listings in New York City
mean_price <- mean(dat_no_OL$price)
# Estimate the mean price of Airbnb listings in New York City
mean_price <- mean(data_no_OL$price)
# Estimate the proportion of Airbnb listings in New York City that are located in Manhattan
prop_manhattan <- sum(nyc_airbnb_data$neighbourhood_group == "Manhattan") / nrow(nyc_airbnb_data)
# Estimate the mean price of Airbnb listings in New York City
mean_price <- mean(data_no_OL$price)
# Estimate the proportion of Airbnb listings in New York City that are located in Manhattan
prop_manhattan <- sum(data_no_OL$neighbourhood_group == "Manhattan") / nrow(data_no_OL)
# Estimate the mean price of Airbnb listings in New York City
mean_price <- mean(data_no_OL$price)
mean_price
# Estimate the proportion of Airbnb listings in New York City that are located in Manhattan
prop_manhattan <- sum(data_no_OL$neighbourhood_group == "Manhattan") / nrow(data_no_OL)
prop_manhattan
View(data_no_OL)
# Test the hypothesis that the mean price of Airbnb listings in Manhattan is significantly higher than the mean price of Airbnb listings in Brooklyn
t.test(data_no_OL$price ~ data_no_OL$neighbourhood_group, data = data_no_OL, subset = data_no_OL$neighbourhood_group %in% c("Manhattan", "Brooklyn"))
# Test the hypothesis that the proportion of Airbnb listings in Manhattan with a minimum nights requirement of 2 or more is significantly higher than the proportion of Airbnb listings in Queens with a minimum nights requirement of 2 or more
prop.test(table(data_no_OL$minimum_nights >= 2, data_no_OL$neighbourhood_group == "Manhattan", data_no_OL$neighbourhood_group == "Queens"))
# Test the hypothesis that the mean price of Airbnb listings in Manhattan is significantly higher than the mean price of Airbnb listings in Brooklyn
t.test(data_no_OL$price ~ data_no_OL$neighbourhood_group, data = data_no_OL, subset = data_no_OL$neighbourhood_group %in% c("Manhattan", "Brooklyn"))
# Compare the mean price of entire home/apartment listings to the mean price of private room listings in Manhattan
t.test(data_no_OL$price ~ data_no_OL$room_type, data = data_no_OL, subset = data_no_OL$neighbourhood_group == "Manhattan")
# Check if there is a relationship between the neighbourhood group (categorical) and the room type (categorical) of Airbnb listings in New York City
table(data_no_OL$neighbourhood_group, data_no_OL$room_type)
chisq.test(table(data_no_OL$neighbourhood_group, data_no_OL$room_type))
# Check if there is a relationship between the neighbourhood group (categorical) and the room type (categorical) of Airbnb listings in New York City
table(data_no_OL$minimum_nights, data_no_OL$cancellation_policy)
# Check if there is a relationship between the neighbourhood group (categorical) and the room type (categorical) of Airbnb listings in New York City
data_no_OL$minimum_nights <- factors(data_no_OL$minimum_nights)
# Check if there is a relationship between the neighbourhood group (categorical) and the room type (categorical) of Airbnb listings in New York City
data_no_OL$minimum_nights <- factors(data_no_OL$minimum_nights)
# Check if there is a relationship between the neighbourhood group (categorical) and the room type (categorical) of Airbnb listings in New York City
data_no_OL$minimum_nights <- factor(data_no_OL$minimum_nights)
table(data_no_OL$minimum_nights, data_no_OL$cancellation_policy)
# Check if there is a relationship between the neighbourhood group (categorical) and the room type (categorical) of Airbnb listings in New York City
data_no_OL$minimum_nights <- factor(data_no_OL$minimum_nights)
table(data_no_OL$minimum_nights, data_no_OL$cancellation_policy)
# Check if there is a relationship between the neighbourhood group (categorical) and the room type (categorical) of Airbnb listings in New York City
table(data_no_OL$neighbourhood_group, data_no_OL$room_type)
chisq.test(table(data_no_OL$neighbourhood_group, data_no_OL$room_type))
# Build a linear regression model to predict the price of Airbnb listings based on variables such as neighbourhood group, room type, minimum nights requirement, and number of reviews
model_price <- lm(price ~ neighbourhood_group + room_type + minimum_nights + number_of_reviews, data = data_no_OL)
# Build a linear regression model to predict the availability of Airbnb listings based on variables such as neighbourhood group, room type, minimum nights requirement, and number of reviews
model_availability <- lm(availability_365 ~ neighbourhood_group + room_type + minimum_nights + number_of_reviews, data = data_no_OL)
# Build a linear regression model to predict the price of Airbnb listings based on variables such as neighbourhood group, room type, minimum nights requirement, and number of reviews
model_price <- lm(price ~ neighbourhood_group + room_type + minimum_nights + number_of_reviews, data = data_no_OL)
summary(model_price)
# Build a linear regression model to predict the availability of Airbnb listings based on variables such as neighbourhood group, room type, minimum nights requirement, and number of reviews
model_availability <- lm(availability_365 ~ neighbourhood_group + room_type + minimum_nights + number_of_reviews, data = data_no_OL)
summary(model_availability)
# Build a linear regression model to predict the price of Airbnb listings based on variables such as neighbourhood group, room type, minimum nights requirement, and number of reviews
model_price <- lm(price ~ neighbourhood_group + room_type + minimum_nights + number_of_reviews, data = data_no_OL)
summary(model_price)
model <- aov(price ~ neighborhood_group, data = data_no_OL)
model <- aov(price ~ neighbourhood_group, data = data_no_OL)
summary(model)
data <- read.csv("airbnb_data.csv")
head(data)
View(data)
sum(is.na(data))
View(data)
# Check how many levels of each columns
unique(data$room_type)
unique(data$neighbourhood_group)
# Making these columns factors
data$neighbourhood_group <- factor(data$neighbourhood_group)
data$room_type <- factor(data$room_type)
knitr::opts_chunk$set(warning=FALSE,message=FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caTools)
data <- read.csv("airbnb_data.csv")
sum(duplicated(data))
sum(is.na(data))
data <- data [, -c(1,2,3,4,6,13)]
unique(data$room_type)
unique(data$neighbourhood_group)
data$neighbourhood_group <- factor(data$neighbourhood_group)
data$room_type <- factor(data$room_type)
data$reviews_per_month <- ifelse(is.na(data$reviews_per_month), 0, data$reviews_per_month)
sum(is.na(data))
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC (Price < 1000)")+
xlim(0, 1000)
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x = room_type, fill = room_type)) +
geom_bar() +
geom_text(stat = 'count', aes(label=..count..)) +
labs(x = "Room Type", y = "Count", title = "Distribution of Room Types in NYC Airbnb Listings") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings with price smaller than $1000
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type (Price < 1000)", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99")) +
ylim(0, 1000)
quantile <- quantile(data$price, probs=c(.25, .75))
iqr <- IQR(data$price)
data_no_OL <- data %>% filter(price > (quantile[1] - 1.5*iqr) & price < (quantile[2] + 1.5*iqr))
ggplot(data = data_no_OL, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC after removing outliers")
# Build a linear regression model using the no outliers data
model <- lm(price ~ neighbourhood_group + latitude + longitude + minimum_nights + room_type + number_of_reviews + availability_365 + calculated_host_listings_count, data = data_no_OL)
summary(model)
# Split the data into a training set and a testing set
set.seed(123)
split <- sample.split(data_no_OL, SplitRatio = 0.8)
train <- subset(data_no_OL, split == TRUE)
test <- subset(data_no_OL, split == FALSE)
# Use the model to predict prices on the testing set
predictions <- predict(model, newdata = test)
# Calculate the root mean squared error (RMSE) to evaluate the performance of the model
rmse <- sqrt(mean((test$price - predictions)^2))
print(rmse)
# Fit the ANOVA model
model <- aov(price ~ neighborhood_group, data = data_no_OL)
# Fit the ANOVA model
model <- aov(price ~ neighborhood_group, data = data)
View(data)
View(data_no_OL)
# Fit the ANOVA model
model <- aov(price ~ neighbourhood_group, data = data_no_OL)
# Print the ANOVA table
summary(model)
knitr::opts_chunk$set(warning=FALSE,message=FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caTools)
data <- read.csv("airbnb_data.csv")
sum(duplicated(data))
sum(is.na(data))
data <- data [, -c(1,2,3,4,6,13)]
unique(data$room_type)
unique(data$neighbourhood_group)
data$neighbourhood_group <- factor(data$neighbourhood_group)
data$room_type <- factor(data$room_type)
data$reviews_per_month <- ifelse(is.na(data$reviews_per_month), 0, data$reviews_per_month)
sum(is.na(data))
ggplot(data = data, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC (Price < 1000)")+
xlim(0, 1000)
#plot distribution of Room Types in NYC Airbnb Listings
ggplot(data = data, aes(x = room_type, fill = room_type)) +
geom_bar() +
geom_text(stat = 'count', aes(label=..count..)) +
labs(x = "Room Type", y = "Count", title = "Distribution of Room Types in NYC Airbnb Listings") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a", "#fb9a99"))
#plot distribution of Room Types in NYC Airbnb Listings with price smaller than $1000
ggplot(data = data, aes(x=room_type, y=price, fill=room_type)) +
geom_boxplot(outlier.alpha=0.1) +
labs(title="Distribution of Price by Room Type (Price < 1000)", x="Room Type", y="Price ($)") +
scale_fill_manual(values=c("#1f78b4", "#b2df8a", "#fb9a99")) +
ylim(0, 1000)
quantile <- quantile(data$price, probs=c(.25, .75))
iqr <- IQR(data$price)
data_no_OL <- data %>% filter(price > (quantile[1] - 1.5*iqr) & price < (quantile[2] + 1.5*iqr))
ggplot(data = data_no_OL, aes(x = price)) +
geom_histogram(binwidth = 10) +
labs(x = "Price ($)", y = "Number of Airbnb", title = "Price Distribution of Airbnb in NYC after removing outliers")
# Build a linear regression model using the no outliers data
model <- lm(price ~ neighbourhood_group + latitude + longitude + minimum_nights + room_type + number_of_reviews + availability_365 + calculated_host_listings_count, data = data_no_OL)
summary(model)
# Split the data into a training set and a testing set
set.seed(123)
split <- sample.split(data_no_OL, SplitRatio = 0.8)
train <- subset(data_no_OL, split == TRUE)
test <- subset(data_no_OL, split == FALSE)
# Use the model to predict prices on the testing set
predictions <- predict(model, newdata = test)
# Calculate the root mean squared error (RMSE) to evaluate the performance of the model
rmse <- sqrt(mean((test$price - predictions)^2))
print(rmse)
# Fit the ANOVA model
model <- aov(reviews_per_month ~ room_type, data = data)
# Print the ANOVA table
summary(model)
# Build a linear regression model using the no outliers data
model <- lm(price ~ neighbourhood_group + latitude + longitude + minimum_nights + room_type + number_of_reviews + availability_365 + calculated_host_listings_count, data = data_no_OL)
summary(model)
# Split the data into a training set and a testing set
set.seed(123)
split <- sample.split(data_no_OL, SplitRatio = 0.8)
train <- subset(data_no_OL, split == TRUE)
test <- subset(data_no_OL, split == FALSE)
# Use the model to predict prices on the testing set
predictions <- predict(model, newdata = test)
# Calculate the root mean squared error (RMSE) to evaluate the performance of the model
rmse <- sqrt(mean((test$price - predictions)^2))
print(rmse)
